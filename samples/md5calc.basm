; Implementation of an MD5 checksum computation with the ByteMachine.
; It is pretty cumbersome to work with 32 bit integers, but it can be 
; done even with this simple instruction set and without a carry flag.
; So this implementation works as a proof that such complex operations
; can indeed be implemented with this tiny instruction set.
; The example output should be: 0f8b13e30bf9c0195964561732be6cc6

; ------------ STATIC MEMORY LAYOUT --------------------
A0 = 0         ; 32 bit
B0 = 4         ; 32 bit
C0 = 8         ; 32 bit
D0 = 12        ; 32 bit	   	 
M  = 16        ; 16x32 bit block of message data
LENGTH = 80   ;  8 bit, data currently collected in M
BITLENGTH = 81 ; 32 bit, total length of message in bits
A = 85		   ; 32 bit, temporary
B = 89         ; 32 bit, temporary
C = 93         ; 32 bit, temporary
D = 97         ; 32 bit, temporary
K = 101        ; 32 bit, temporary
F = 105        ; 32 bit, temporary

; ----------- RAM INITIALIZATION AND STARTUP -------------
DATA32 0        ; A0
DATA32 0        ; B0
DATA32 0        ; C0
DATA32 0        ; D0
DATA32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   ; M
DATA 0          ; LENGTH
DATA32 0        ; BITLENGTH
DATA32 0        ; A
DATA32 0        ; B
DATA32 0        ; C
DATA32 0        ; D
DATA32 0        ; K
DATA32 0        ; F

CALL MAIN
HALT

; ------------------- MD5 EXAMPLE USAGE -------------
MAIN:
; stack-in: (ret1,ret2)
--CALL MD5INIT	
--CALL APPENDEXAMPLETEXT	
--CALL MD5FINISH
--CALL MD5PRINT
<<RETURN

APPENDEXAMPLETEXT:
; stack-in: (ret1,ret2)
-->>>>>>>>>>>>>DATA 12 "Mary had a l"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "ittle lamb, "
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "His fleece w"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "as white as "
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "snow, And ev"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "erywhere tha"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "t Mary went,"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 " The lamb wa"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 12 "s sure to go"
--<<<<<<<<<<<<<CALL APPENDBYTES
-->>>>>>>>>>>>>DATA 1  ".xxxxxxxxxxx"
--<<<<<<<<<<<<<CALL APPENDBYTES
<<RETURN

APPENDBYTES:
; stack-in: num b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 (ret1,ret2)
--------------->ADR !1
---------------->GET !0
---------------<<CALL MD5APPEND
<<<<<<<<<<<<<<<RETURN


; -------------- MD5 COMPUTATION -------------

MD5INIT:
; stack-in: (ret1,ret2)
-->>>>DATA32 0x67452301
------>DATA A0
--<<<<<CALL INIT32
-->>>>DATA32 0xEFCDAB89
------>DATA B0
--<<<<<CALL INIT32
-->>>>DATA32 0x98BADCFE
------>DATA C0
--<<<<<CALL INIT32
-->>>>DATA32 0x10325476
------>DATA D0
--<<<<<CALL INIT32
-->>>>DATA32 0
------>DATA BITLENGTH
--<<<<<CALL INIT32
-->DATA 0
--->DATA LENGTH
---<STO 0
--<OP POP
<<RETURN

MD5APPEND: 
; stack-in: address, length, (ret1,ret2)
---->GET !1
----<JNZ MD5APPENDCONTINUE
<<<<RETURN
MD5APPENDCONTINUE:
---->GET !0
-----LOD 0
----->DATA 1
----<<CALL MD5APPENDCHECKCOUNTER
---->GET !0
----->DATA 1
-----<OP ADD
----<SET !0
---->GET !1
----->DATA 1
-----<OP SUB
----<SET !1
----JUMP MD5APPEND

MD5FINISH:
; stack-in: (ret1,ret2)
-->>DATA 128 0
--<<CALL MD5APPENDCHECKCOUNTER
MD5FINISHLOOP:
-->DATA LENGTH
---LOD 0
--->DATA 56
---<OP XOR
--<JZ MD5FINISHLOOPEND
-->>DATA 0 0
--<<CALL MD5APPENDCHECKCOUNTER
--JUMP MD5FINISHLOOP
MD5FINISHLOOPEND:	
-->>DATA BITLENGTH M+56
--<<CALL COPY32
-->>>>DATA32 0
------>DATA M+60
--<<<<<CALL INIT32
--CALL MD5COMPUTEBLOCK
<<RETURN

MD5PRINT:
; stack-in: (ret1,ret2)
-->DATA A0
--<CALL PRINT32
-->DATA B0
--<CALL PRINT32
-->DATA C0
--<CALL PRINT32
-->DATA D0
--<CALL PRINT32
--CALL PRINTNEWLINE
<<RETURN

MD5APPENDCHECKCOUNTER: 
; stack-in: databyte, increasecounter (ret1/ret2)
---->GET !1
----<JNZ MD5NEEDCOUNTERINCREASE
----JUMP MD5NOCOUNTERINCREASE
MD5NEEDCOUNTERINCREASE:
---->>>>DATA32 8
-------->ADR !4
--------->DATA BITLENGTH
--------<<CALL ADD32
-------<OP POP
------<OP POP
-----<OP POP
----<OP POP
MD5NOCOUNTERINCREASE:
---->GET !0
----->DATA LENGTH
------LOD 0
------>DATA M
------<OP ADD
-----<STO 0
----<OP POP    
---->DATA LENGTH
-----LOD 0
----->DATA 1
-----<OP ADD
----->GET 0
------>DATA LENGTH
------<STO 0
-----<OP POP
----->DATA 64
-----<OP XOR
----<JNZ MD5APPENDDONE
----CALL MD5COMPUTEBLOCK
---->DATA 0
----->DATA LENGTH
-----<STO 0
----<OP POP
MD5APPENDDONE:
<<<<RETURN

MD5COMPUTEBLOCK:
; stack-in:  (ret1,ret2)
-->>DATA A0 A
--<<CALL COPY32
-->>DATA B0 B
--<<CALL COPY32
-->>DATA C0 C
--<<CALL COPY32
-->>DATA D0 D
--<<CALL COPY32

-->>>>DATA32 0xd76aa478
------>>DATA 7 0
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xe8c7b756
------>>DATA 12 1
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x242070db
------>>DATA 17 2
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xc1bdceee
------>>DATA 22 3
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xf57c0faf
------>>DATA 7 4
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x4787c62a
------>>DATA 12 5
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xa8304613
------>>DATA 17 6
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xfd469501
------>>DATA 22 7
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x698098d8
------>>DATA 7 8
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x8b44f7af
------>>DATA 12 9
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xffff5bb1
------>>DATA 17 10
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x895cd7be
------>>DATA 22 11
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x6b901122
------>>DATA 7 12
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xfd987193
------>>DATA 12 13
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0xa679438e
------>>DATA 17 14
--<<<<<<CALL COMPUTEBLOCK0
-->>>>DATA32 0x49b40821
------>>DATA 22 15
--<<<<<<CALL COMPUTEBLOCK0

-->>>>DATA32 0xf61e2562
------>>DATA 5 1
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xc040b340
------>>DATA 9 6
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x265e5a51
------>>DATA 14 11
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xe9b6c7aa
------>>DATA 20 0
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xd62f105d
------>>DATA 5 5
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x02441453
------>>DATA 9 10
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xd8a1e681
------>>DATA 14 15
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xe7d3fbc8
------>>DATA 20 4
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x21e1cde6
------>>DATA 5 9
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xc33707d6
------>>DATA 9 14
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xf4d50d87
------>>DATA 14 3
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x455a14ed
------>>DATA 20 8
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xa9e3e905
------>>DATA 5 13
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0xfcefa3f8
------>>DATA 9 2
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x676f02d9
------>>DATA 14 7
--<<<<<<CALL COMPUTEBLOCK1
-->>>>DATA32 0x8d2a4c8a
------>>DATA 20 12
--<<<<<<CALL COMPUTEBLOCK1

-->>>>DATA32 0xfffa3942
------>>DATA 4 5
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x8771f681
------>>DATA 11 8
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x6d9d6122
------>>DATA 16 11
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xfde5380c
------>>DATA 23 14
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xa4beea44
------>>DATA 4 1
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x4bdecfa9
------>>DATA 11 4
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xf6bb4b60
------>>DATA 16 7
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xbebfbc70
------>>DATA 23 10
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x289b7ec6
------>>DATA 4 13
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xeaa127fa
------>>DATA 11 0
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xd4ef3085
------>>DATA 16 3
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x04881d05
------>>DATA 23 6
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xd9d4d039
------>>DATA 4 9
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xe6db99e5
------>>DATA 11 12
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0x1fa27cf8
------>>DATA 16 15
--<<<<<<CALL COMPUTEBLOCK2
-->>>>DATA32 0xc4ac5665
------>>DATA 23 2
--<<<<<<CALL COMPUTEBLOCK2

-->>>>DATA32 0xf4292244
------>>DATA 6 0
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x432aff97
------>>DATA 10 7
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xab9423a7
------>>DATA 15 14
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xfc93a039
------>>DATA 21 5
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x655b59c3
------>>DATA 6 12
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x8f0ccc92
------>>DATA 10 3
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xffeff47d
------>>DATA 15 10
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x85845dd1
------>>DATA 21 1
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x6fa87e4f
------>>DATA 6 8
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xfe2ce6e0
------>>DATA 10 15
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xa3014314
------>>DATA 15 6
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x4e0811a1
------>>DATA 21 13
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xf7537e82
------>>DATA 6 4
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xbd3af235
------>>DATA 10 11
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0x2ad7d2bb
------>>DATA 15 2
--<<<<<<CALL COMPUTEBLOCK3
-->>>>DATA32 0xeb86d391
------>>DATA 21 9
--<<<<<<CALL COMPUTEBLOCK3

-->>DATA A A0
--<<CALL ADD32
-->>DATA B B0
--<<CALL ADD32
-->>DATA C C0
--<<CALL ADD32
-->>DATA D D0
--<<CALL ADD32	
<<RETURN
COMPUTEBLOCK0:
; stack-in: k0,k1,k2,k3, s, g, (ret1,ret2) 
-------->>DATA C F
--------<<CALL COPY32
-------->>DATA D F
--------<<CALL XOR32
-------->>DATA B F
--------<<CALL AND32
-------->>DATA D F
--------<<CALL XOR32
-------->ADR !0
--------->GET !4
---------->GET !5
--------<<<CALL MD5ROUND
<<<<<<<<RETURN
COMPUTEBLOCK1:
; stack-in: k0,k1,k2,k3, s, g, (ret1,ret2) 
-------->>DATA B F
--------<<CALL COPY32
-------->>DATA C F
--------<<CALL XOR32
-------->>DATA D F
--------<<CALL AND32
-------->>DATA C F
--------<<CALL XOR32
-------->ADR !0
--------->GET !4
---------->GET !5
--------<<<CALL MD5ROUND
<<<<<<<<RETURN
COMPUTEBLOCK2:
; stack-in: k0,k1,k2,k3, s, g, (ret1,ret2) 
-------->>DATA B F
--------<<CALL COPY32
-------->>DATA C F
--------<<CALL XOR32
-------->>DATA D F
--------<<CALL XOR32
-------->ADR !0
--------->GET !4
---------->GET !5
--------<<<CALL MD5ROUND
<<<<<<<<RETURN
COMPUTEBLOCK3:
; stack-in: k0,k1,k2,k3, s, g, (ret1,ret2) 
-------->>>>DATA32 0xffffffff
------------>ADR !8
------------->DATA F
------------<<CALL COPY32
-----------<OP POP
----------<OP POP
---------<OP POP
--------<OP POP
-------->>DATA D F
--------<<CALL XOR32
-------->>DATA B F
--------<<CALL OR32
-------->>DATA C F
--------<<CALL XOR32
-------->ADR !0
--------->GET !4
---------->GET !5
--------<<<CALL MD5ROUND
<<<<<<<<RETURN

PDEBUG:
-->DATA A
--<CALL PRINT32
-->DATA B
--<CALL PRINT32
-->DATA C
--<CALL PRINT32
-->DATA D
--<CALL PRINT32
-->DATA F
--<CALL PRINT32
-->DATA K
--<CALL PRINT32
--CALL PRINTNEWLINE
<<RETURN

MD5ROUND:   
; stack-in:  k-addr, s, g, (ret1,ret2)
;CALL PDEBUG
----->GET !0
------>DATA K
-----<<CALL COPY32
;CALL PDEBUG
----->>DATA A F
-----<<CALL ADD32    
;CALL PDEBUG
----->>DATA K F
-----<<CALL ADD32
;CALL PDEBUG
----->DATA M
------>GET !2
------->DATA 0    
-------<OP SHL
------->DATA 0    
-------<OP SHL
------<OP ADD
------>DATA F
-----<<CALL ADD32
;CALL PDEBUG
----->GET !1
------>DATA F
-----<<CALL ROL32
;CALL PDEBUG
----->>DATA D A
-----<<CALL COPY32
;CALL PDEBUG
----->>DATA C D
-----<<CALL COPY32
;CALL PDEBUG
----->>DATA B C
-----<<CALL COPY32
;CALL PDEBUG
----->>DATA F B
-----<<CALL ADD32
;CALL PDEBUG
;CALL PRINTNEWLINE
<<<<<RETURN

; ---------- COMPUTATION AND MOVEMENT PRIMITIVES ---------

INIT32:
; stack-in: b0 b1 b2 b3 target (ret1,ret2)
------->ADR !0
-------->GET !4
-------<<CALL COPY32
<<<<<<<RETURN

COPY32:
; stack-in: source, target (ret1,ret2)
---->GET !0
-----LOD 0
----->GET !1
-----<STO 0
----<OP POP
---->GET !0
-----LOD 1
----->GET !1
-----<STO 1
----<OP POP
---->GET !0
-----LOD 2
----->GET !1
-----<STO 2
----<OP POP
---->GET !0
-----LOD 3
----->GET !1
-----<STO 3
----<OP POP
<<<<RETURN
		
AND32:	
; stack-in: source-address, target-address  (ret1,ret2)
---->GET !0
-----LOD 0
----->GET !1
------LOD 0
-----<OP AND
----->GET !1
-----<STO 0
----<OP POP
---->GET !0
-----LOD 1
----->GET !1
------LOD 1
-----<OP AND
----->GET !1
-----<STO 1
----<OP POP
---->GET !0
-----LOD 2
----->GET !1
------LOD 2
-----<OP AND
----->GET !1
-----<STO 2
----<OP POP
---->GET !0
-----LOD 3
----->GET !1
------LOD 3
-----<OP AND
----->GET !1
-----<STO 3
----<OP POP
<<<<RETURN

OR32:
; stack-in: source-address, target-address  (ret1,ret2)
---->GET !0
-----LOD 0
----->GET !1
------LOD 0
-----<OP OR
----->GET !1
-----<STO 0
----<OP POP
---->GET !0
-----LOD 1
----->GET !1
------LOD 1
-----<OP OR
----->GET !1
-----<STO 1
----<OP POP
---->GET !0
-----LOD 2
----->GET !1
------LOD 2
-----<OP OR
----->GET !1
-----<STO 2
----<OP POP
---->GET !0
-----LOD 3
----->GET !1
------LOD 3
-----<OP OR
----->GET !1
-----<STO 3
----<OP POP
<<<<RETURN

XOR32:
; stack-in: source-address, target-address  (ret1,ret2)
---->GET !0
-----LOD 0
----->GET !1
------LOD 0
-----<OP XOR
----->GET !1
-----<STO 0
----<OP POP
---->GET !0
-----LOD 1
----->GET !1
------LOD 1
-----<OP XOR
----->GET !1
-----<STO 1
----<OP POP
---->GET !0
-----LOD 2
----->GET !1
------LOD 2
-----<OP XOR
----->GET !1
-----<STO 2
----<OP POP
---->GET !0
-----LOD 3
----->GET !1
------LOD 3
-----<OP XOR
----->GET !1
-----<STO 3
----<OP POP
<<<<RETURN
	
; -- subroutine to add a 32-bit value to another
ADD32:    
;  input stack:  source-address, target-address, (ret1,ret2)
---->DAT 0  ; carry flag
----->GET !0   
------LOD 0  
------>GET !1  
-------LOD 0  
------<CALL FULLADD
------>GET !1  
------<STO 0 
-----<OP POP
----->GET !0
------LOD 1  
------>GET !1
-------LOD 1  
------<CALL FULLADD
------>GET !1   
------<STO 1 
-----<OP POP
----->GET !0
------LOD 2  
------>GET !1
-------LOD 2  
------<CALL FULLADD
------>GET !1   
------<STO 2 
-----<OP POP
----->GET !0
------LOD 3
------>GET !1
-------LOD 3
------<CALL FULLADD
------>GET !1  
------<STO 3 
-----<OP POP    
----<OP POP    
<<<<RETURN
        
; -- subroutine to do a full 8-bit add with carry 
;    (having incomming and outgoing carry and no
;     direct ALU support makes this really complex)
FULLADD:    
; input stack:  carry, x, y, (ret1,ret2)
; output stack: carry, sum
; detect if x+y itself would produce an overflow
----->GET !1
------>GET !2
------->DATA 255
-------<OP XOR
------<OP GT
-----<JZ NOOVERFLOW
----->GET !1   ; overflow detected - sum up x, y and carry
------>GET !2
------<OP ADD   
------>GET !0
------<OP ADD
-----<SET !1
----->DATA 1       ; output carry is 1
-----<SET !0    
--<<<RETURN   
NOOVERFLOW:
----->GET !1   ; sum up x and y - no overflow can arise
------>GET !2    
------<OP ADD    
-----<SET !1
----->GET !0  ; check if carry is comming in
-----<JNZ INCOMMINGCARRY  
--<<<RETURN    ; when no carry comes in, no overflow can happen (and carry was already cleared)	
INCOMMINGCARRY:    
----->DATA 1
------>GET !1
------<OP ADD      ; carry did come in, so increase the sum 	
-----<SET !1
----->GET !1  
-----<JNZ NOOVERFLOW2
; when after increasing, the value is 0, there was an overflow (and carry is already set)    
--<<<RETURN
NOOVERFLOW2:
----->DAT 0
-----<SET !0   ; output carry must be cleared
--<<<RETURN


ROL32:      
; stack-in: distance address (ret1,ret2)
---->GET !0
----<JNZ ROL32CONTINUE
<<<<RETURN
ROL32CONTINUE:
---->GET !1
-----LOD 3
----->GET 0
------>GET !1
-------LOD 2
------<OP SHL
------>GET !1
------<STO 3
-----<OP POP
----->GET !1
------LOD 2
------>GET !1
-------LOD 1
------<OP SHL
------>GET !1
------<STO 2
-----<OP POP
----->GET !1
------LOD 1
------>GET !1
-------LOD 0
------<OP SHL
------>GET !1
------<STO 1
-----<OP POP
----->GET !1
------LOD 0
------>GET !4
------<OP SHL
------>GET !1
------<STO 0
-----<OP POP
----<OP POP
---->GET !0
----->DATA 1
-----<OP SUB
----<SET !0
----JUMP ROL32


; ---------- DATA OUTPUT FUNCTIONS ------------

PRINTNEWLINE:
; input stack:  (ret1,ret2)
-->DATA 10
--<CALL SENDBYTE    
<<RETURN

; -- subroutine to send a readable representation
; -- of a 32-bit number to the output
PRINT32:
; input stack:  address, (ret1,ret2)
; output stack: -
--->GET !0
----LOD 0
---<CALL PRINTBYTE
--->GET !0
----LOD 1
---<CALL PRINTBYTE
--->GET !0
----LOD 2
---<CALL PRINTBYTE
--->GET !0
----LOD 3
---<CALL PRINTBYTE
<<<RETURN

; -- subroutine to send a readable representation
; -- of a single byte to the output
PRINTBYTE:
; input stack:  byte, (ret1,ret2)
; output stack: -
--->GET !0
---->DAT 0
----<OP SHR
---->DAT 0
----<OP SHR
---->DAT 0
----<OP SHR
---->DAT 0
----<OP SHR
---<CALL PRINTNYBBLE
--->GET !0
---->DAT 15
----<OP AND
---<CALL PRINTNYBBLE
<<<RETURN

; -- subroutine to send a readable representation
; -- of a single nybble to the output
PRINTNYBBLE:
; input stack:  nybble, (ret1,ret2)
; output stack: -
--->GET !0
---->DATA 48  ; create code '0' - '9'
----<OP ADD
---->DATA 58
----->GET 1
------>GET 1
------<OP LT
-----<SET 0
----<JNZ ONLY0TO9
---->DATA 7  ; shift code to 'A' - 'F'
----<OP ADD
ONLY0TO9:
---<CALL SENDBYTE
<<<RETURN

; -- subroutine to send a single byte to 
; -- the output port 15 (for debugging in the virtual machine)
; -- and also send it in serial form on port0/bit0 
; -- (9600 baud, single start/stop bit)
SENDBYTE:
; inputstack: byte (ret1,ret2)
--->GET !0 
---<OUT 15
<<<RETURN

