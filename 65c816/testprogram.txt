; Small test program to use various aspects of the ByteMachine with a 65C816 CPU.
; It is small enough so that I do not even use an assembler.
; The program tries to use different parts of the ROM and different parts of the RAM for read and write.
; It also accesses the input and the output port to check if all bits are working.
; The output LEDs will play an animation which should look familiar to anyone who knows the 
; 80ths TV show "Knight Rider".

808000 80 C0 60 30 18 0C 06 03 01 03 06 0C 18 30 60 C0  ; pattern sequence

80FF00 A9 00          LDA #$00         ; initialize counter
80FF02 85 00          STA $00 

80FF04 A5 00          LDA $00          ; read counter from low RAM
80FF06 18             CLC              ; increment up to 15 
80FF07 69 01          ADC #1
80FF09 29 0F          AND #$0F
80FF0B 85 00          STA $00          ; write incremented counter to low RAM

80FF0D AA             TAX
80FF0E BF 00 80 80    LDA $808000,X    ; fetch output pattern from ROM
80FF12 8F FF FF 07    STA $07FFFF      ; write to high RAM
80FF16 AF FF FF 07    LDA $07FFFF      ; read from high RAM

80FF1A 8F BB BB 80    STA $80BBBB      ; write pattern to output port (switches to IO mode)
80FF1E 25 00          AND $00          ; read IO port and modify output pattern
80FF20 8F BB BB 80    STA $80BBBB      ; write modified pattern to output port
80FF24 85 01          STA $01          ; dummy write to RAM to disable IO mode

80FF26 A9 05          LDA #5           ; waiting loop
80FF28 A0 00      w0: LDY #0
80FF2A A2 00      w1: LDX #0
80FF2C E8         w2: INX
80FF2D D0 FD          BNE w2
80FF2F C8             INY
80FF30 D0 F8          BNE w1
80FF32 38             SEC 
80FF33 E9 01          SBC #1
80FF35 D0 F1          BNE w0

80FF37 5C 04 FF 80    JMP $80FF04
          
; Bootstrap code to switch to native mode that can access all RAM and all ROM.
; While in emulation mode, this data will also be reached via bank 0 (000000 - 00FFFF) instead of RAM
80FFF0 5C F4 FF 80    JMP $80FFF4      ; jump to native mode ROM area 
80FFF4 18             CLC     
80FFF5 FB             XCE              ; turn off emulation mode (X and M flags are still 1)
80FFF6 5C 00 FF 80    JMP $80FF00      ; start user program
80FFFA FF
80FFFB FF
80FFFC F0 FF                           ; reset vector is pointing to bank 0
